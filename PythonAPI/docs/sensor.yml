---
- module_name: carla
  # - CLASSES ------------------------------
  classes:
  - class_name: Sensor
    parent: carla.Actor
    # - DESCRIPTION ------------------------
    doc: >
      Sensors compound a specific family of actors quite diverse and unique. They are normally spawned as attachment/sons of a vehicle (take a look at carla.World to learn about actor spawning). Sensors are thoroughly designed to retrieve different types of data that they are listening to. The data they receive is shaped as different subclasses inherited from carla.SensorData (depending on the sensor).

        Most sensors can be divided in two groups: those receiving data on every tick (cameras, point clouds and some specific sensors) and those who only receive under certain circumstances (trigger detectors). CARLA provides a specific set of sensors and their blueprint can be found in carla.BlueprintLibrary. All the information on their preferences and settlement can be found [here](ref_sensors.md), but the list of those available in CARLA so far goes as follow.
        <br><b>Receive data on every tick.</b>
        - [Depth camera](ref_sensors.md#depth-camera).
        - [Gnss sensor](ref_sensors.md#gnss-sensor).
        - [IMU sensor](ref_sensors.md#imu-sensor).
        - [Lidar raycast](ref_sensors.md#lidar-raycast-sensor).
        - [SemanticLidar raycast](ref_sensors.md#semanticlidar-raycast-sensor).
        - [Radar](ref_sensors.md#radar-sensor).
        - [RGB camera](ref_sensors.md#rgb-camera).
        - [Semantic Segmentation camera](ref_sensors.md#semantic-segmentation-camera).
        <br><b>Only receive data when triggered.</b>
        - [Collision detector](ref_sensors.md#collision-detector).
        - [Lane invasion detector](ref_sensors.md#lane-invasion-detector).
        - [Obstacle detector](ref_sensors.md#obstacle-detector).

    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: is_listening
      type: boolean
      doc: >
        When <b>True</b> the sensor will be waiting for data.
    # - METHODS ----------------------------
    methods:
    - def_name: listen
      params:
      - param_name: callback
        type: function
        doc: >
          The called function with one argument containing the sensor data.
      doc: >
        The function the sensor will be calling to every time a new measurement is received. This function needs for an argument containing an object type carla.SensorData to work with.
    # --------------------------------------
    - def_name: is_listening
      doc: >
        Returns whether the sensor is in a listening state.
    # --------------------------------------
    - def_name: stop
      doc: >
        Commands the sensor to stop listening for data.
    # --------------------------------------
    - def_name: enable_for_ros
      doc: >
        Commands the sensor to be processed to be able to publish in ROS2 without any listen to it.
    # --------------------------------------
    - def_name: disable_for_ros
      doc: >
        Commands the sensor to not be processed for publishing in ROS2 if there is no any listen to it.
    # --------------------------------------
    - def_name: is_enabled_for_ros
      doc: >
        Returns if the sensor is enabled or not to publish in ROS2 if there is no any listen to it.
    # --------------------------------------
    - def_name: listen_to_gbuffer
      params:
      - param_name: gbuffer_id
        type: carla.GBufferTextureID
        doc: >
          The ID of the target Unreal Engine GBuffer texture.
      - param_name: callback
        type: function
        doc: >
          The called function with one argument containing the received GBuffer texture.
      doc: >
        The function the sensor will be calling to every time the desired GBuffer texture is received.<br>
        This function needs for an argument containing an object type carla.SensorData to work with.
    # --------------------------------------
    - def_name: is_listening_gbuffer
      params:
      - param_name: gbuffer_id
        type: carla.GBufferTextureID
        doc: >
          The ID of the target Unreal Engine GBuffer texture.
      doc: >
        Returns whether the sensor is in a listening state for a specific GBuffer texture.
    # --------------------------------------
    - def_name: stop_gbuffer
      params:
      - param_name: gbuffer_id
        type: carla.GBufferTextureID
        doc: >
          The ID of the Unreal Engine GBuffer texture.
      doc: >
        Commands the sensor to stop listening for the specified GBuffer texture.
    # --------------------------------------
    - def_name: __str__
    # --------------------------------------
